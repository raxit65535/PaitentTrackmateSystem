/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.sanjivni.struts.action;

import java.security.MessageDigest;
import java.util.UUID;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.swing.JOptionPane;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.sanjivni.struts.*;
import com.sanjivni.struts.form.PaitentRegistrationForm;

/** 
 * MyEclipse Struts
 * Creation date: 07-31-2013
 * 
 * XDoclet definition:
 * @struts.action path="/paitentRegistration" name="paitentRegistrationForm" input="/paitent/paitentRegistration.jsp" scope="request" validate="true"
 */
public class PaitentRegistrationAction extends Action {
	/*
	 * Generated Methods
	 */

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		PaitentRegistrationForm paitentRegistrationForm = (PaitentRegistrationForm) form;// TODO Auto-generated method stub
		
		

		
		String _name = paitentRegistrationForm.getName();
		String _pass = paitentRegistrationForm.getPass();
		String _cpass = paitentRegistrationForm.getCpass();
		String _email = paitentRegistrationForm.getEmail();
		String _phoneno = paitentRegistrationForm.getPhoneno();
		String _gender = paitentRegistrationForm.getGender();
		String _dob = paitentRegistrationForm.getDob();
		String _policy = paitentRegistrationForm.getPolicy();
		String _idproof = paitentRegistrationForm.getIdproof();
		String _value = paitentRegistrationForm.getValue();
		String _insuranceno = paitentRegistrationForm.getInsuranceno();
		String _uid =null;
		
		String pass1 = null;
		String pass2 = null;
		
		
		UUID idOne = UUID.randomUUID();
		_uid = idOne.toString();
		
		
		try
		{
		MessageDigest md=MessageDigest.getInstance("MD5");
		String input=_pass;
		md.update(input.getBytes());
		byte[] output=md.digest();
		MD5password sd = new MD5password();
		pass1=sd.bytesToHex(output);
		}
		catch(Exception e)
		{
			System.out.println(e.getMessage());
		}
		//conformpassword to md5
		try
		{
		MessageDigest md=MessageDigest.getInstance("MD5");
		String input=_cpass;
		md.update(input.getBytes());
		byte[] output=md.digest();
		MD5password sd = new MD5password();
		pass2 = sd.bytesToHex(output);
		}
		catch(Exception e)
		{
			System.out.println(e.getMessage());
		}
		
		
		System.out.println("going in first condition");
		boolean heli = RistrictRepeatUser.checkDb(_policy, _insuranceno);
		boolean rax = RistrictRepeatUser.repeatuser(_policy, _insuranceno);
	    boolean buchi = RistrictRepeatUser.Email(_policy, _email);
		
			
		if(heli == true && rax == true && buchi==true)
		{
		
		int status = RepeatPaitent.registerpaitent(_name, _email, pass1, pass2, _phoneno, _gender, _dob, _idproof, _value, _policy, _insuranceno,  _uid);
		
		
		if(status>0)
		{
			//JOptionPane.showMessageDialog(null, "registred successfully");
			return mapping.findForward("success");
		}
		
		}
		
		return mapping.findForward("failure");
	}
	}
